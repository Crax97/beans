program -> statement* EOF

statement -> decl |
expr ";" |
ifStmt |
whileStmt |
forStmt |
"return" expr ";" |
"break" ";" |
"continue" ";" |
"pass" ";"

decl -> varDecl|
    funDecl |
    structDecl |
    enumDecl

varDecl -> "var" ID ("=" expr)? ";"
funDecl -> "function" ID "(" arglist? ")" statement* "end"
structDecl -> "struct" ID "{" arglist? "}"
enumDecl -> "enum" ID "{" enumlist? "}"

arglist -> ID ("," ID)*
enumlist -> ID ( = NUM)? ("," ID (= NUM)?*
paramlist -> expr ("," expr)*

expr -> equality | assign | lambdaExpr
lambdaExpr -> "lambda" "(" arglist ")" statement* "end"
assign -> or ( "=" assign)*
or -> and ("or" and)*
and -> equality ("and" equality)* 
equality -> comparison ( ( "==" | "!=" ) comparison)*
comparison -> shift ( ("<" | ">" | "<=" | ">=") shift)*
shift -> bit_or ( ( "<<" | ">>" ) bit_or)*
bit_or -> bit_and ("|" bit_and)*
bit_and -> sum ( "&" sum)*
sum ( ("+" | "-") product)*
product ->  unary ( ( "*" | "/" ) unary)*
unary -> ("+" | "-" | "not")? call
call -> literal ("." ID)* ( "(" paramlist? ")" )?
literal -> NUM | ID | STRING | "true" | "false" | "(" expr ")"

ifStmt -> "if" expr "then" statement* ("elif" expr "then" statement* )* ("else" statement*)? "end"
whileStmt -> "while" expr "do" stmt* "end"
forStmt -> "for" ID "in" expr "do" statement* "end"